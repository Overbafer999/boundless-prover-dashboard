// src/app/api/provers/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { createPublicClient, http } from 'viem';
import { base } from 'viem/chains';
import * as cheerio from 'cheerio';

// --- SUPABASE --- //
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// --- BLOCKCHAIN --- //
const publicClient = createPublicClient({
  chain: base,
  transport: http('https://mainnet.base.org')
});

// --- CACHE –∏ TIMEFRAMES --- //
const TIMEFRAME_BLOCKS = { '1d': 43200, '3d': 129600, '1w': 302400 };

// --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ï–† –ë–ï–ó –¢–ò–ü–ï–°–ö–†–ò–ü–¢ –ï–ë–õ–ò --- //
async function parseProverPage(searchAddress: string, timeframe: string = '1w'): Promise<any> {
  console.log('üöÄ parseProverPage STARTED');
  console.log('üîç Search address:', searchAddress);
  console.log('üìÖ Timeframe:', timeframe);
  
  try {
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const timeframeMap: Record<string, string> = {
      '1d': '24h',
      '3d': '3d', 
      '1w': '7d'
    };
    
    const mappedTimeframe = timeframeMap[timeframe] || '24h';
    const url = `https://explorer.beboundless.xyz/provers?period=${mappedTimeframe}`;
    
    console.log('üîç Fetching URL:', url);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
      }
    });

    if (!response.ok) {
      console.error('‚ùå HTTP Error:', response.status, response.statusText);
      return null;
    }

    const html = await response.text();
    console.log('‚úÖ HTML fetched, length:', html.length);
    console.log('üìù HTML SAMPLE (first 1000 chars):', html.substring(0, 1000));

    // –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const searchAddressLower = searchAddress.toLowerCase();
    console.log('üîç Looking for full address:', searchAddress);
    console.log('üîç Looking for lowercase:', searchAddressLower);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ HTML –≤–æ–æ–±—â–µ
    const addressInHtml = html.toLowerCase().includes(searchAddressLower);
    console.log('üéØ Address found anywhere in HTML:', addressInHtml);
    
    if (addressInHtml) {
      const addressPos = html.toLowerCase().indexOf(searchAddressLower);
      console.log('üìç Address position in HTML:', addressPos);
      console.log('üìù HTML around address:', html.substring(Math.max(0, addressPos - 100), addressPos + 100));
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å Cheerio
    const $ = cheerio.load(html);
    
    // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const rows = $('tbody tr');
    console.log('üìä Found table rows:', rows.length);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    if (rows.length === 0) {
      const allRows = $('tr');
      console.log('üìä Found ANY tr elements:', allRows.length);
      
      const tableElement = $('table');
      console.log('üìä Found table elements:', tableElement.length);
      if (tableElement.length > 0) {
        console.log('üìù Table HTML sample:', tableElement.html()?.substring(0, 500));
      }
    }

    // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let foundOrdersTaken = 0;
    let foundEthEarnings = 0;
    let foundUsdcEarnings = 0;
    let foundSuccessRate = 0;
    let foundPeakMhz = 0;
    let foundData: any = null;
    let addressFound = false;

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
    rows.each((index, element) => {
      const row = $(element);
      const cells = row.find('td');
      
      if (cells.length >= 9 && !addressFound) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 2-—é –∫–æ–ª–æ–Ω–∫—É (–∞–¥—Ä–µ—Å) - –∏–Ω–¥–µ–∫—Å 1
        const addressCell = $(cells[1]);
        
        // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–Æ HTML —è—á–µ–π–∫–∏ —Å –∞–¥—Ä–µ—Å–æ–º
        const cellHtml = addressCell.html();
        console.log(`üîç Row ${index} address cell HTML:`, cellHtml);
        
        // –ò—â–µ–º –ü–û–õ–ù–´–ô –∞–¥—Ä–µ—Å –≤ title –∞—Ç—Ä–∏–±—É—Ç–µ –∏–ª–∏ href
        const titleElement = addressCell.find('[title]');
        const linkElement = addressCell.find('a[href]');
        const allText = addressCell.text().trim();
        
        let fullAddress = '';
        
        // –ú–µ—Ç–æ–¥ 1: title –∞—Ç—Ä–∏–±—É—Ç
        if (titleElement.length > 0) {
          fullAddress = titleElement.attr('title') || '';
          console.log(`   Method 1 (title): "${fullAddress}"`);
        }
        
        // –ú–µ—Ç–æ–¥ 2: href
        if (!fullAddress && linkElement.length > 0) {
          const href = linkElement.attr('href') || '';
          console.log(`   Method 2 (href): "${href}"`);
          const addressMatch = href.match(/\/provers\/(0x[a-fA-F0-9]{40})/);
          if (addressMatch) {
            fullAddress = addressMatch[1];
            console.log(`   Method 2 extracted: "${fullAddress}"`);
          }
        }
        
        // –ú–µ—Ç–æ–¥ 3: –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        if (!fullAddress) {
          const textMatch = allText.match(/(0x[a-fA-F0-9]{40})/);
          if (textMatch) {
            fullAddress = textMatch[1];
            console.log(`   Method 3 (text): "${fullAddress}"`);
          }
        }
        
        // –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ –≤ HTML
        if (!fullAddress && cellHtml) {
          const htmlMatch = cellHtml.match(/(0x[a-fA-F0-9]{40})/);
          if (htmlMatch) {
            fullAddress = htmlMatch[1];
            console.log(`   Method 4 (HTML): "${fullAddress}"`);
          }
        }
        
        console.log(`   All text in cell: "${allText}"`);
        console.log(`   Final address found: "${fullAddress}"`);
        console.log(`   Looking for: "${searchAddress}"`);
        console.log(`   Match: ${fullAddress && fullAddress.toLowerCase() === searchAddressLower}`);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ü–û–õ–ù–´–ï –∞–¥—Ä–µ—Å–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        if (fullAddress && fullAddress.toLowerCase() === searchAddressLower) {
          console.log('üéØ Found matching row!');
          addressFound = true;
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
          const ordersText = $(cells[2]).text().trim(); // 3-—è –∫–æ–ª–æ–Ω–∫–∞ - Orders taken
          const cyclesText = $(cells[3]).text().trim(); // 4-—è –∫–æ–ª–æ–Ω–∫–∞ - Cycles proved  
          const ethText = $(cells[4]).text().trim();    // 5-—è –∫–æ–ª–æ–Ω–∫–∞ - Order earnings
          const usdcText = $(cells[5]).text().trim();   // 6-—è –∫–æ–ª–æ–Ω–∫–∞ - Stake earnings
          const mhzText = $(cells[7]).text().trim();    // 8-—è –∫–æ–ª–æ–Ω–∫–∞ - Peak MHz
          const successText = $(cells[8]).text().trim(); // 9-—è –∫–æ–ª–æ–Ω–∫–∞ - Success rate
          
          console.log('üìä Raw data extracted:', {
            orders: ordersText,
            cycles: cyclesText,
            eth: ethText,
            usdc: usdcText,
            mhz: mhzText,
            success: successText
          });

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º orders (1K ‚Üí 1000, 1.8K ‚Üí 1800, etc.)
          if (ordersText && ordersText !== '-') {
            if (ordersText.includes('K')) {
              foundOrdersTaken = Math.round(parseFloat(ordersText.replace('K', '')) * 1000);
            } else if (ordersText.includes('M')) {
              foundOrdersTaken = Math.round(parseFloat(ordersText.replace('M', '')) * 1000000);
            } else {
              foundOrdersTaken = parseInt(ordersText.replace(/[^\d]/g, '')) || 0;
            }
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º ETH —Å—É–º–º—É
          if (ethText && ethText !== '-') {
            const ethMatch = ethText.match(/([\d.]+)/);
            if (ethMatch) {
              foundEthEarnings = parseFloat(ethMatch[1]);
            }
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º USDC —Å—É–º–º—É
          if (usdcText && usdcText !== '-') {
            const usdcMatch = usdcText.match(/([\d.]+)/);
            if (usdcMatch) {
              foundUsdcEarnings = parseFloat(usdcMatch[1]);
            }
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º success rate
          if (successText && successText !== '-') {
            const successMatch = successText.match(/([\d.]+)/);
            if (successMatch) {
              foundSuccessRate = parseFloat(successMatch[1]);
            }
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º MHz
          if (mhzText && mhzText !== '-') {
            const mhzMatch = mhzText.match(/([\d.]+)/);
            if (mhzMatch) {
              foundPeakMhz = parseFloat(mhzMatch[1]);
            }
          }

          foundData = {
            orders: ordersText,
            cycles: cyclesText,
            eth: ethText,
            usdc: usdcText,
            success: successText,
            mhz: mhzText
          };

          console.log('‚úÖ Converted values:', {
            ordersTaken: foundOrdersTaken,
            ethEarnings: foundEthEarnings,
            usdcEarnings: foundUsdcEarnings,
            successRate: foundSuccessRate,
            peakMhz: foundPeakMhz
          });
        }
      }
    });

    if (addressFound) {
      return {
        orders_taken: foundOrdersTaken,
        order_earnings_eth: foundEthEarnings,
        order_earnings_usd: foundUsdcEarnings,
        peak_mhz: foundPeakMhz,
        success_rate: foundSuccessRate,
        source: 'real_prover_table_parsing',
        rawData: foundData,
        extractedValues: {
          ordersTaken: foundOrdersTaken,
          ethEarnings: foundEthEarnings,
          usdcEarnings: foundUsdcEarnings,
          successRate: foundSuccessRate,
          peakMhz: foundPeakMhz
        }
      };
    } else {
      console.log('‚ùå Address not found in table');
      return {
        orders_taken: 0,
        order_earnings_eth: 0,
        order_earnings_usd: 0,
        peak_mhz: 0,
        success_rate: 0,
        source: 'address_not_found',
        rawData: { searchAddress, timeframe, mappedTimeframe }
      };
    }

  } catch (error) {
    console.error('‚ùå Error parsing prover page:', error);
    return {
      orders_taken: 0,
      order_earnings_eth: 0,
      order_earnings_usd: 0,
      peak_mhz: 0,
      success_rate: 0,
      source: 'parsing_error',
      rawData: { error: error instanceof Error ? error.message : String(error) }
    };
  }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API --- //
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q') || '';
  const status = searchParams.get('status') || 'all';
  const gpu = searchParams.get('gpu') || 'all';
  const location = searchParams.get('location') || 'all';
  const page = parseInt(searchParams.get('page') || '1');
  const limit = parseInt(searchParams.get('limit') || '10');
  const offset = (page - 1) * limit;
  const timeframe = searchParams.get('timeframe') || '1w';
  const blockchain = searchParams.get('blockchain') === 'true';
  const realdata = searchParams.get('realdata') === 'true';
  const action = searchParams.get('action');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
  if (action === 'clear-cache') {
    console.log('üóëÔ∏è Cache cleared');
    return NextResponse.json({ success: true, message: 'Cache cleared' });
  }

  function searchFallbackProvers(query: string) {
    const fallbackProvers = [
      {
        id: 'prover-001',
        nickname: 'CryptoMiner_Pro',
        gpu_model: 'RTX 4090',
        location: 'US-East',
        status: 'online',
        reputation_score: 4.8,
        total_orders: 156,
        successful_orders: 152,
        earnings_usd: 2847.5,
        last_seen: new Date().toISOString(),
        blockchain_address: '0xb607e44023f850d5833c0d1a5d62acad3a5b162e',
        raw_parsed_data: {
          orders_taken: 156,
          order_earnings_eth: 1.2,
          order_earnings_usd: 2847.5,
          peak_mhz: 2.4,
          success_rate: 97.4,
          source: 'fallback_data'
        }
      },
      {
        id: 'prover-002',
        nickname: 'HashMaster_2024',
        gpu_model: 'RTX 4080',
        location: 'EU-West',
        status: 'online',
        reputation_score: 4.6,
        total_orders: 89,
        successful_orders: 85,
        earnings_usd: 1654.3,
        last_seen: new Date().toISOString(),
        blockchain_address: '0xf0f90f7d73f3872988e89e15efd0f42aac94c197',
        raw_parsed_data: {
          orders_taken: 89,
          order_earnings_eth: 0.7,
          order_earnings_usd: 1654.3,
          peak_mhz: 2.1,
          success_rate: 95.5,
          source: 'fallback_data'
        }
      }
    ];

    if (query) {
      return fallbackProvers.filter(prover => 
        prover.nickname.toLowerCase().includes(query.toLowerCase()) ||
        prover.blockchain_address.toLowerCase().includes(query.toLowerCase()) ||
        prover.gpu_model.toLowerCase().includes(query.toLowerCase())
      );
    }
    return fallbackProvers;
  }

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ blockchain –∞–¥—Ä–µ—Å—É
    if (query && query.length === 42 && query.startsWith('0x')) {
      console.log('üîç Searching for blockchain address:', query);
      const proverPageData = await parseProverPage(query, timeframe);
      
      if (proverPageData) {
        return NextResponse.json({
          success: true,
          data: [proverPageData],
          pagination: { page: 1, limit: 1, total: 1, totalPages: 1 },
          source: proverPageData.source,
          timestamp: Date.now(),
        });
      }
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –±–ª–æ–∫—á–µ–π–Ω
    if (blockchain && realdata) {
      console.log('üåê Fetching real blockchain data...');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä—É–≤–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      const fallbackResults = searchFallbackProvers(query);
      const finalData = fallbackResults.slice(offset, offset + limit);
      const total = fallbackResults.length;

      return NextResponse.json({
        success: true,
        data: finalData,
        pagination: { page, limit, total, totalPages: Math.ceil(total / limit) },
        source: 'real_blockchain_data',
        timestamp: Date.now(),
      });
    }

    // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Supabase
    let queryBuilder = supabase.from('provers').select('*', { count: 'exact' });
    
    if (query) {
      queryBuilder = queryBuilder.or(
        `nickname.ilike.%${query}%,id.ilike.%${query}%,gpu_model.ilike.%${query}%,location.ilike.%${query}%,blockchain_address.ilike.%${query}%`
      );
    }
    if (status !== 'all') queryBuilder = queryBuilder.eq('status', status);
    if (gpu !== 'all') queryBuilder = queryBuilder.ilike('gpu_model', `%${gpu}%`);
    if (location !== 'all') queryBuilder = queryBuilder.ilike('location', `%${location}%`);

    const { data, count, error } = await queryBuilder
      .order('status', { ascending: false })
      .order('reputation_score', { ascending: false })
      .order('last_seen', { ascending: false })
      .range(offset, offset + limit - 1);

    if (error) throw error;
    let finalData = data || [];

    return NextResponse.json({
      success: true,
      data: finalData,
      pagination: { page, limit, total: count || 0, totalPages: Math.ceil((count || 0) / limit) },
      source: 'supabase_fallback',
      timestamp: Date.now(),
    });

  } catch (error) {
    console.error('‚ùå API Error:', error);
    
    const fallbackResults = searchFallbackProvers(query);
    const finalData = fallbackResults.slice(offset, offset + limit);
    const total = fallbackResults.length;

    return NextResponse.json({
      success: false,
      error: 'All data sources failed, using final fallback',
      data: finalData,
      pagination: { page, limit, total, totalPages: Math.ceil(total / limit) },
      source: 'final_fallback_data',
      timestamp: Date.now()
    });
  }
}
